"""
EduNerve Assistant Service - Database Models
"""

from sqlalchemy import Column, Integer, String, Boolean, DateTime, ForeignKey, Text, JSON, Float
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func
from enum import Enum as PyEnum
from app.database import Base


class AssistantPlan(Base):
    """Assistant plan for personalized learning"""
    __tablename__ = "assistant_plans"
    
    id = Column(Integer, primary_key=True, index=True)
    student_id = Column(Integer, nullable=False, index=True)
    school_id = Column(Integer, nullable=False, index=True)
    
    # Educational context
    subject = Column(String(100), nullable=False)
    class_level = Column(String(20), nullable=False)
    topic = Column(String(200), nullable=True)
    
    # Plan content
    plan_content = Column(Text, nullable=False)  # JSON string with plan details
    plan_type = Column(String(50), nullable=False)  # study_plan, resource_recommendation, etc.
    
    # Associated content
    content_id = Column(Integer, nullable=True)  # Reference to content from content service
    
    # Status
    status = Column(String(20), default="active")  # active, completed, archived
    
    # Timestamps
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), onupdate=func.now())
    
    # Relationships
    resources = relationship("StudyResource", back_populates="plan")
    activities = relationship("LearningActivity", back_populates="plan")


class StudyResource(Base):
    """Study resources generated by the assistant"""
    __tablename__ = "study_resources"
    
    id = Column(Integer, primary_key=True, index=True)
    plan_id = Column(Integer, ForeignKey("assistant_plans.id"), nullable=False)
    
    # Resource details
    resource_type = Column(String(50), nullable=False)  # video, audio, quiz, text
    resource_title = Column(String(200), nullable=False)
    resource_description = Column(Text, nullable=True)
    resource_url = Column(String(500), nullable=False)
    
    # Educational context
    subject = Column(String(100), nullable=False)
    class_level = Column(String(20), nullable=False)
    topic = Column(String(200), nullable=True)
    
    # Metadata
    keywords = Column(JSON, nullable=True)  # Array of keywords
    difficulty_level = Column(String(20), nullable=True)
    estimated_duration_minutes = Column(Integer, nullable=True)
    
    # Source information
    source_type = Column(String(50), nullable=False)  # ai_generated, youtube, external
    source_metadata = Column(JSON, nullable=True)  # Additional source info
    
    # Multi-tenant
    school_id = Column(Integer, nullable=False, index=True)
    
    # Status
    is_active = Column(Boolean, default=True)
    
    # Timestamps
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), onupdate=func.now())
    
    # Relationships
    plan = relationship("AssistantPlan", back_populates="resources")


class LearningActivity(Base):
    """Track student learning activities"""
    __tablename__ = "learning_activities"
    
    id = Column(Integer, primary_key=True, index=True)
    student_id = Column(Integer, nullable=False, index=True)
    school_id = Column(Integer, nullable=False, index=True)
    plan_id = Column(Integer, ForeignKey("assistant_plans.id"), nullable=True)
    
    # Activity details
    activity_type = Column(String(50), nullable=False)  # study, quiz, video_watch, audio_listen
    activity_data = Column(JSON, nullable=True)  # Activity-specific data
    
    # Educational context
    subject = Column(String(100), nullable=False)
    class_level = Column(String(20), nullable=False)
    topic = Column(String(200), nullable=True)
    
    # Activity metrics
    duration_minutes = Column(Integer, nullable=True)
    score = Column(Float, nullable=True)  # If applicable
    completed = Column(Boolean, default=False)
    
    # Timestamps
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    completed_at = Column(DateTime(timezone=True), nullable=True)
    
    # Relationships
    plan = relationship("AssistantPlan", back_populates="activities")


class StudentPreference(Base):
    """Student learning preferences"""
    __tablename__ = "student_preferences"
    
    id = Column(Integer, primary_key=True, index=True)
    student_id = Column(Integer, nullable=False, index=True)
    school_id = Column(Integer, nullable=False, index=True)
    
    # Learning preferences
    preferred_subjects = Column(JSON, nullable=True)  # Array of subjects
    learning_style = Column(String(50), nullable=True)  # visual, auditory, kinesthetic, mixed
    difficulty_preference = Column(String(20), nullable=True)  # easy, medium, hard
    
    # Resource preferences
    preferred_resource_types = Column(JSON, nullable=True)  # Array of resource types
    study_time_preference = Column(String(50), nullable=True)  # morning, afternoon, evening
    session_duration_preference = Column(Integer, nullable=True)  # Minutes
    
    # Accessibility needs
    text_to_speech_enabled = Column(Boolean, default=False)
    large_text_mode = Column(Boolean, default=False)
    high_contrast_mode = Column(Boolean, default=False)
    
    # Timestamps
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), onupdate=func.now())


class AssistantInteraction(Base):
    """Track interactions with the assistant"""
    __tablename__ = "assistant_interactions"
    
    id = Column(Integer, primary_key=True, index=True)
    student_id = Column(Integer, nullable=False, index=True)
    school_id = Column(Integer, nullable=False, index=True)
    
    # Interaction details
    interaction_type = Column(String(50), nullable=False)  # resource_request, plan_generation, etc.
    request_data = Column(JSON, nullable=True)  # Original request
    response_data = Column(JSON, nullable=True)  # Assistant response
    
    # Context
    subject = Column(String(100), nullable=True)
    class_level = Column(String(20), nullable=True)
    topic = Column(String(200), nullable=True)
    
    # Feedback
    user_rating = Column(Integer, nullable=True)  # 1-5 rating
    user_feedback = Column(Text, nullable=True)
    
    # Timestamps
    created_at = Column(DateTime(timezone=True), server_default=func.now())


class ResourceUsage(Base):
    """Track resource usage by students"""
    __tablename__ = "resource_usage"
    
    id = Column(Integer, primary_key=True, index=True)
    student_id = Column(Integer, nullable=False, index=True)
    school_id = Column(Integer, nullable=False, index=True)
    resource_id = Column(Integer, ForeignKey("study_resources.id"), nullable=False)
    
    # Usage details
    access_count = Column(Integer, default=1)
    total_time_spent_minutes = Column(Integer, default=0)
    last_accessed = Column(DateTime(timezone=True), server_default=func.now())
    
    # Completion status
    completed = Column(Boolean, default=False)
    completion_percentage = Column(Float, default=0.0)
    
    # Timestamps
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), onupdate=func.now())


class AIModelUsage(Base):
    """Track AI model usage for billing and monitoring"""
    __tablename__ = "ai_model_usage"
    
    id = Column(Integer, primary_key=True, index=True)
    school_id = Column(Integer, nullable=False, index=True)
    
    # Usage details
    model_name = Column(String(100), nullable=False)
    service_type = Column(String(50), nullable=False)  # openai, google_tts, youtube_api
    request_type = Column(String(50), nullable=False)  # text_generation, audio_generation, etc.
    
    # Cost tracking
    tokens_used = Column(Integer, nullable=True)
    characters_processed = Column(Integer, nullable=True)
    api_calls_made = Column(Integer, default=1)
    estimated_cost = Column(Float, nullable=True)
    
    # Context
    subject = Column(String(100), nullable=True)
    class_level = Column(String(20), nullable=True)
    
    # Timestamps
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    date_only = Column(String(10), nullable=False, index=True)  # YYYY-MM-DD for aggregation
