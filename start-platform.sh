#!/bin/bash

# EduNerve Platform - Complete Startup Script
# This script builds and starts all services with proper initialization

set -e

echo "ðŸš€ Starting EduNerve Educational Platform..."
echo "================================================"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if Docker is running
if ! docker info > /dev/null 2>&1; then
    print_error "Docker is not running. Please start Docker and try again."
    exit 1
fi

# Check if Docker Compose is available
if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
    print_error "Docker Compose is not available. Please install Docker Compose."
    exit 1
fi

print_status "Docker is running and Docker Compose is available"

# Clean up any existing containers
print_status "Cleaning up existing containers..."
docker-compose down -v --remove-orphans 2>/dev/null || true

# Remove any dangling images
print_status "Cleaning up dangling images..."
docker image prune -f

# Build all services
print_status "Building all services..."
docker-compose build --no-cache

# Start infrastructure services first
print_status "Starting infrastructure services (PostgreSQL, Redis)..."
docker-compose up -d postgres redis

# Wait for PostgreSQL to be ready
print_status "Waiting for PostgreSQL to be ready..."
until docker-compose exec postgres pg_isready -U edunerve -d edunerve; do
    echo "PostgreSQL is not ready yet. Waiting..."
    sleep 2
done
print_success "PostgreSQL is ready"

# Wait for Redis to be ready
print_status "Waiting for Redis to be ready..."
until docker-compose exec redis redis-cli ping | grep PONG; do
    echo "Redis is not ready yet. Waiting..."
    sleep 2
done
print_success "Redis is ready"

# Start backend services
print_status "Starting backend services..."
docker-compose up -d \
    auth-service \
    content-quiz-service \
    file-storage-service \
    sync-messaging-service \
    assistant-service \
    admin-service \
    notification-service

# Wait for services to be healthy
print_status "Waiting for backend services to be ready..."
sleep 10

# Start API Gateway
print_status "Starting API Gateway..."
docker-compose up -d api-gateway

# Wait for API Gateway to be ready
print_status "Waiting for API Gateway to be ready..."
until curl -f http://localhost:8000/health > /dev/null 2>&1; do
    echo "API Gateway is not ready yet. Waiting..."
    sleep 2
done
print_success "API Gateway is ready"

# Install frontend dependencies and build
print_status "Setting up frontend..."
cd frontend

# Check if Node.js is installed
if ! command -v node &> /dev/null; then
    print_error "Node.js is not installed. Please install Node.js and npm."
    exit 1
fi

# Install dependencies
print_status "Installing frontend dependencies..."
npm install

# Build the frontend
print_status "Building frontend application..."
npm run build

# Start the frontend in development mode
print_status "Starting frontend development server..."
npm run dev &
FRONTEND_PID=$!

# Go back to root directory
cd ..

# Display service status
echo ""
echo "ðŸŽ‰ EduNerve Platform is now running!"
echo "================================================"
echo ""
echo "ðŸ“Š Service Status:"
echo "âœ… PostgreSQL Database: localhost:5432"
echo "âœ… Redis Cache: localhost:6379"
echo "âœ… API Gateway: http://localhost:8000"
echo "âœ… Frontend Application: http://localhost:3000"
echo ""
echo "ðŸ”§ Backend Services:"
echo "  â€¢ Auth Service: Port 8001"
echo "  â€¢ Content & Quiz Service: Port 8002"
echo "  â€¢ File Storage Service: Port 8003"
echo "  â€¢ Sync & Messaging Service: Port 8004"
echo "  â€¢ AI Assistant Service: Port 8005"
echo "  â€¢ Admin Service: Port 8006"
echo "  â€¢ Notification Service: Port 8007"
echo ""
echo "ðŸ“± Frontend Features Available:"
echo "  â€¢ Course Management: http://localhost:3000/dashboard/courses"
echo "  â€¢ Quiz System: http://localhost:3000/dashboard/quizzes"
echo "  â€¢ Real-time Messaging: http://localhost:3000/dashboard/messages"
echo "  â€¢ File Management: http://localhost:3000/dashboard/files"
echo "  â€¢ Analytics Dashboard: http://localhost:3000/dashboard/analytics"
echo ""
echo "ðŸ”— API Documentation:"
echo "  â€¢ API Gateway: http://localhost:8000/docs"
echo "  â€¢ Direct service docs available on individual service ports"
echo ""
echo "ðŸ’¾ Database Access:"
echo "  â€¢ Host: localhost"
echo "  â€¢ Port: 5432"
echo "  â€¢ Database: edunerve"
echo "  â€¢ Username: edunerve"
echo "  â€¢ Password: edunerve2024"
echo ""
echo "ðŸ›‘ To stop all services:"
echo "  docker-compose down"
echo "  kill $FRONTEND_PID  # Stop frontend dev server"
echo ""

# Health check all services
print_status "Performing health checks..."
echo ""

# Check API Gateway
if curl -f http://localhost:8000/health > /dev/null 2>&1; then
    print_success "API Gateway: Healthy"
else
    print_warning "API Gateway: Not responding"
fi

# Check frontend
if curl -f http://localhost:3000 > /dev/null 2>&1; then
    print_success "Frontend: Healthy"
else
    print_warning "Frontend: Not ready yet (may still be starting)"
fi

# Check individual services through API Gateway
services=("auth" "content" "files" "sync" "assistant" "admin" "notifications")
for service in "${services[@]}"; do
    if curl -f "http://localhost:8000/api/v1/$service/health" > /dev/null 2>&1; then
        print_success "$service service: Healthy"
    else
        print_warning "$service service: Not responding"
    fi
done

echo ""
print_success "Platform startup complete!"
echo ""
echo "ðŸ“– Next Steps:"
echo "1. Open http://localhost:3000 in your browser"
echo "2. Create an admin account or use test credentials"
echo "3. Start creating courses and content"
echo "4. Invite students and teachers"
echo ""
echo "ðŸ“š Documentation and API testing:"
echo "â€¢ Visit http://localhost:8000/docs for API documentation"
echo "â€¢ Use the frontend interface for user-friendly interaction"
echo ""
echo "ðŸŽ¯ Key Features to Test:"
echo "â€¢ Create and manage courses"
echo "â€¢ Upload and organize course materials"
echo "â€¢ Generate AI-powered quizzes"
echo "â€¢ Real-time messaging and collaboration"
echo "â€¢ Progress tracking and analytics"
echo ""

# Keep script running to show logs
print_status "Monitoring service logs (Ctrl+C to stop)..."
docker-compose logs -f
